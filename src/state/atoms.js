import { atom, selector } from 'recoil';
import benefitsMockData from '../data/benefits.mock.json';

// User input state
export const userInputState = atom({
  key: 'userInputState',
  default: ''
});

// Classification result from AI
export const classificationState = atom({
  key: 'classificationState',
  default: null
});

// Selected benefit from the list
export const selectedBenefitState = atom({
  key: 'selectedBenefitState',
  default: null
});

// Action plan generated by AI
export const actionPlanState = atom({
  key: 'actionPlanState',
  default: null
});

// Loading states
export const isClassifyingState = atom({
  key: 'isClassifyingState',
  default: false
});

export const isGeneratingPlanState = atom({
  key: 'isGeneratingPlanState',
  default: false
});

// Error states
export const classificationErrorState = atom({
  key: 'classificationErrorState',
  default: null
});

export const actionPlanErrorState = atom({
  key: 'actionPlanErrorState',
  default: null
});

// Dark mode state
export const darkModeState = atom({
  key: 'darkModeState',
  default: false
});

// Current screen state
export const currentScreenState = atom({
  key: 'currentScreenState',
  default: 'input' // 'input', 'processing', 'benefits', 'details'
});

// Clarifying question state
export const clarifyingQuestionState = atom({
  key: 'clarifyingQuestionState',
  default: null
});

// Filtered benefits based on classification
export const filteredBenefitsSelector = selector({
  key: 'filteredBenefitsSelector',
  get: ({ get }) => {
    const classification = get(classificationState);

    if (!classification || classification === 'UNRECOGNIZED') {
      return benefitsMockData;
    }

    return benefitsMockData.filter(benefit =>
      benefit.category === classification
    );
  }
});

// All benefits (for fallback)
export const allBenefitsState = atom({
  key: 'allBenefitsState',
  default: benefitsMockData
});
